CMAKE_MINIMUM_REQUIRED(VERSION 3.12)

SET(zone_sources
	aa.cpp
	aggro.cpp
	attack.cpp
	beacon.cpp
	bonuses.cpp
	buffstacking.cpp
	client.cpp
	client_mods.cpp
	client_packet.cpp
	client_process.cpp
	command.cpp
	corpse.cpp
	data_bucket.cpp
	doors.cpp
	effects.cpp
	encounter.cpp
	entity.cpp
	exp.cpp
	fearpath.cpp
	forage.cpp
	global_loot_manager.cpp
	groups.cpp
	guild.cpp
	guild_mgr.cpp
	hate_list.cpp
	horse.cpp
	inventory.cpp
	loot.cpp
	lua_bit.cpp
	lua_corpse.cpp
	lua_client.cpp
	lua_door.cpp
	lua_encounter.cpp
	lua_entity.cpp
	lua_entity_list.cpp
	lua_general.cpp
	lua_group.cpp
	lua_hate_list.cpp
	lua_inventory.cpp
	lua_item.cpp
	lua_iteminst.cpp
	lua_mob.cpp
	lua_npc.cpp
	lua_object.cpp
	lua_packet.cpp
	lua_parser.cpp
	lua_parser_events.cpp
	lua_raid.cpp
	lua_spawn.cpp
	lua_spell.cpp
	main.cpp
	map.cpp
	mob.cpp
	mob_ai.cpp
	mob_movement_manager.cpp
	npc.cpp
	object.cpp
	oriented_bounding_box.cpp
	pathfinder_interface.cpp
	pathfinder_nav_mesh.cpp
	pathfinder_null.cpp
	pathfinder_waypoint.cpp
	pathing.cpp
	petitions.cpp
	pets.cpp
	position.cpp
	qglobals.cpp
	queryserv.cpp
	questmgr.cpp
	quest_parser_collection.cpp
	raids.cpp
	raycast_mesh.cpp
	spawn2.cpp
	spawngroup.cpp
	special_attacks.cpp
	spell_effects.cpp
	spells.cpp
	titles.cpp
	tradeskills.cpp
	trading.cpp
	trap.cpp
	water_map.cpp
	water_map_v1.cpp
	water_map_v2.cpp
	waypoints.cpp
	worldserver.cpp
	zone.cpp
	zone_config.cpp
	zonedb.cpp
	zone_event_scheduler.cpp
	zone_reload.cpp
	zoning.cpp
)

SET(zone_headers
	aa.h
	beacon.h
	client.h
	client_packet.h
	command.h
	common.h
	corpse.h
	data_bucket.h
	doors.h
	encounter.h
	entity.h
	errmsg.h
	event_codes.h
	forage.h
	global_loot_manager.h
	groups.h
	guild_mgr.h
	hate_list.h
	horse.h
	lua_bit.h
	lua_client.h
	lua_corpse.h
	lua_encounter.h
	lua_entity.h
	lua_entity_list.h
	lua_general.h
	lua_group.h
	lua_hate_list.h
	lua_inventory.h
	lua_item.h
	lua_iteminst.h
	lua_mob.h
	lua_npc.h
	lua_object.h
	lua_packet.h
	lua_parser.h
	lua_parser_events.h
	lua_ptr.h
	lua_raid.h
	lua_spawn.h
	lua_spell.h
	map.h
	masterentity.h
	mob.h
	mob_movement_manager.h
	npc.h
	object.h
	oriented_bounding_box.h
	pathfinder_interface.h
	pathfinder_nav_mesh.h
	pathfinder_null.h
	pathfinder_waypoint.h
	petitions.h
	pets.h
	position.h
	qglobals.h
	queryserv.h
	quest_interface.h
	questmgr.h
	quest_parser_collection.h
	raids.h
	raycast_mesh.h
	spawn2.h
	spawngroup.h
	string_ids.h
	titles.h
	trap.h
	water_map.h
	water_map_v1.h
	water_map_v2.h
	worldserver.h
	zone.h
	zone_event_scheduler.h
	zone_config.h
	zonedb.h
	zonedump.h
	zone_reload.h
)

IF(EQEMU_DEPOP_INVALIDATES_CACHE)
	ADD_DEFINITIONS(-DDEPOP_INVALIDATES_NPC_TYPES_CACHE)
ENDIF(EQEMU_DEPOP_INVALIDATES_CACHE)

ADD_EXECUTABLE(zone ${zone_sources} ${zone_headers})

INSTALL(TARGETS zone RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)

IF (WIN32 AND EQEMU_BUILD_PCH)
    TARGET_PRECOMPILE_HEADERS(zone PRIVATE ../common/pch/pch.h)
    TARGET_PRECOMPILE_HEADERS(zone PRIVATE ../common/types.h ../common/eqemu_logsys.h ../common/eqemu_logsys_log_aliases.h ../common/features.h ../common/global_define.h)
    TARGET_PRECOMPILE_HEADERS(zone PRIVATE mob.h corpse.h npc.h doors.h entity.h client.h zone.h)
ENDIF()

ADD_DEFINITIONS(-DZONE)

TARGET_LINK_LIBRARIES(zone ${SERVER_LIBS})

SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
