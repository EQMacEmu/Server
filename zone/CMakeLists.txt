CMAKE_MINIMUM_REQUIRED(VERSION 3.12)

SET(zone_sources
	aa.cpp
	aggro.cpp
	api_service.cpp
	attack.cpp
	beacon.cpp
	bonuses.cpp
	buffstacking.cpp
	cheat_manager.cpp
	client.cpp
	client_mods.cpp
	client_packet.cpp
	client_process.cpp
	combat_record.cpp
	corpse.cpp
	data_bucket.cpp
	doors.cpp
	effects.cpp
	encounter.cpp
	entity.cpp
	exp.cpp
	fearpath.cpp
	forage.cpp
	global_loot_manager.cpp
	groups.cpp
	guild.cpp
	guild_mgr.cpp
	hate_list.cpp
	horse.cpp
	inventory.cpp
	loot.cpp
	main.cpp
	map.cpp
	mob.cpp
	mob_ai.cpp
	mob_movement_manager.cpp
	npc.cpp
	object.cpp
	oriented_bounding_box.cpp
	pathfinder_interface.cpp
	pathfinder_nav_mesh.cpp
	pathfinder_null.cpp
	pathfinder_waypoint.cpp
	pathing.cpp
	petitions.cpp
	pets.cpp
	position.cpp
	qglobals.cpp
	queryserv.cpp
	questmgr.cpp
	quest_parser_collection.cpp
	raids.cpp
	raycast_mesh.cpp
	sidecar_api/sidecar_api.cpp
    	sidecar_api/loot_simulator_controller.cpp
	spawn2.cpp
	spawngroup.cpp
	special_attacks.cpp
	spell_effects.cpp
	spells.cpp
	titles.cpp
	tradeskills.cpp
	trading.cpp
	trap.cpp
	water_map.cpp
	water_map_v1.cpp
	water_map_v2.cpp
	waypoints.cpp
	worldserver.cpp
	zone.cpp
	zone_cli.cpp
	zone_config.cpp
	zonedb.cpp
	zone_event_scheduler.cpp
	zone_npc_factions.cpp
	zone_reload.cpp
	zoning.cpp
)

SET(zone_headers
	aa.h
	api_service.h
	beacon.h
	cheat_manager.h
	client.h
	client_packet.h
	combat_record.h
	command.h
	common.h
	corpse.h
	data_bucket.h
	doors.h
	encounter.h
	entity.h
	event_codes.h
	forage.h
	global_loot_manager.h
	groups.h
	guild_mgr.h
	hate_list.h
	horse.h
	lua_bit.h
	lua_client.h
	lua_corpse.h
	lua_encounter.h
	lua_entity.h
	lua_entity_list.h
	lua_general.h
	lua_group.h
	lua_hate_list.h
	lua_inventory.h
	lua_item.h
	lua_iteminst.h
	lua_mob.h
	lua_npc.h
	lua_object.h
	lua_packet.h
	lua_parser.h
	lua_parser_events.h
	lua_ptr.h
	lua_raid.h
	lua_spawn.h
	lua_spell.h
	map.h
	masterentity.h
	mob.h
	mob_movement_manager.h
	npc.h
	object.h
	oriented_bounding_box.h
	pathfinder_interface.h
	pathfinder_nav_mesh.h
	pathfinder_null.h
	pathfinder_waypoint.h
	petitions.h
	pets.h
	position.h
	qglobals.h
	queryserv.h
	quest_interface.h
	questmgr.h
	quest_parser_collection.h
	raids.h
	raycast_mesh.h
	sidecar_api/sidecar_api.h
	spawn2.h
	spawngroup.h
	string_ids.h
	titles.h
	trap.h
	water_map.h
	water_map_v1.h
	water_map_v2.h
	worldserver.h
	zone.h
	zone_event_scheduler.h
	zone_config.h
	zonedb.h
	zonedump.h
	zone_cli.h
	zone_reload.h
)

# lua unity build_command
set(lua_sources
	lua_bit.cpp
	lua_corpse.cpp
	lua_client.cpp
	lua_door.cpp
	lua_encounter.cpp
	lua_entity.cpp
	lua_entity_list.cpp
	lua_general.cpp
	lua_group.cpp
	lua_hate_list.cpp
	lua_inventory.cpp
	lua_item.cpp
	lua_iteminst.cpp
	lua_mob.cpp
	lua_npc.cpp
	lua_object.cpp
	lua_packet.cpp
	lua_parser.cpp
	lua_parser_events.cpp
	lua_raid.cpp
	lua_spawn.cpp
	lua_spell.cpp
)

add_library(lua_zone STATIC ${lua_sources})
set_target_properties(lua_zone PROPERTIES UNITY_BUILD ON UNITY_BUILD_BATCH_SIZE 8)

# gm commands
set(gm_command_sources
    command.cpp
    gm_commands/advnpcspawn.cpp
    gm_commands/aggrozone.cpp
    gm_commands/ai.cpp
    gm_commands/altactivate.cpp
    gm_commands/appearance.cpp
    gm_commands/attack.cpp
    gm_commands/attackentity.cpp
    gm_commands/ban.cpp
    gm_commands/beard.cpp
    gm_commands/beardcolor.cpp
    gm_commands/bestz.cpp
    gm_commands/boatinfo.cpp
    gm_commands/bug.cpp
    gm_commands/castspell.cpp
    gm_commands/chat.cpp
    gm_commands/chattest.cpp
    gm_commands/cleartimers.cpp
    gm_commands/connectworldserver.cpp
    gm_commands/corpse.cpp
    gm_commands/crashtest.cpp
    gm_commands/d1.cpp
    gm_commands/damage.cpp
    gm_commands/damagetotals.cpp
    gm_commands/dbspawn2.cpp
    gm_commands/delacct.cpp
    gm_commands/deletegraveyard.cpp
    gm_commands/depop.cpp
    gm_commands/depopzone.cpp
    gm_commands/disablerecipe.cpp
    gm_commands/doanim.cpp
    gm_commands/emote.cpp
    gm_commands/enablerecipe.cpp
    gm_commands/equipitem.cpp
    gm_commands/expansion.cpp
    gm_commands/face.cpp
    gm_commands/falltest.cpp
    gm_commands/fillbuffs.cpp
    gm_commands/find.cpp
    gm_commands/fish.cpp
    gm_commands/fixmob.cpp
    gm_commands/flagedit.cpp
    gm_commands/fleeinfo.cpp
    gm_commands/forage.cpp
    gm_commands/giveitem.cpp
    gm_commands/givemoney.cpp
    gm_commands/giveplayerfaction.cpp
    gm_commands/gmdamage.cpp
    gm_commands/goto.cpp
    gm_commands/grid.cpp
    gm_commands/guild.cpp
    gm_commands/guildapprove.cpp
    gm_commands/guildcreate.cpp
    gm_commands/guildlist.cpp
    gm_commands/hair.cpp
    gm_commands/haircolor.cpp
    gm_commands/helm.cpp
    gm_commands/interrogateinv.cpp
    gm_commands/interrupt.cpp
    gm_commands/ipban.cpp
    gm_commands/iteminfo.cpp
    gm_commands/keyring.cpp
    gm_commands/kick.cpp
    gm_commands/kill.cpp
    gm_commands/list.cpp
    gm_commands/listnpcs.cpp
    gm_commands/loc.cpp
    gm_commands/logs.cpp
    gm_commands/logtest.cpp
    gm_commands/lootsim.cpp
    gm_commands/makepet.cpp
    gm_commands/manaburn.cpp
    gm_commands/manastat.cpp
    gm_commands/memspell.cpp
    gm_commands/merchantcloseshop.cpp
    gm_commands/merchantopenshop.cpp
    gm_commands/modifynpcstat.cpp
    gm_commands/movechar.cpp
    gm_commands/mule.cpp
    gm_commands/mysql.cpp
    gm_commands/mysqltest.cpp
    gm_commands/mystats.cpp
    gm_commands/npccast.cpp
    gm_commands/npcedit.cpp
    gm_commands/npcemote.cpp
    gm_commands/npcloot.cpp
    gm_commands/npcsay.cpp
    gm_commands/npcshout.cpp
    gm_commands/npcspawn.cpp
    gm_commands/npctypecache.cpp
    gm_commands/npctypespawn.cpp
    gm_commands/nukebuffs.cpp
    gm_commands/nukeitem.cpp
    gm_commands/numauths.cpp
    gm_commands/optest.cpp
    gm_commands/path.cpp
    gm_commands/petition.cpp
    gm_commands/pf.cpp
    gm_commands/playsound.cpp
    gm_commands/profanity.cpp
    gm_commands/push.cpp
    gm_commands/raidloot.cpp
    gm_commands/randomfeatures.cpp
    gm_commands/randtest.cpp
    gm_commands/refreshgroup.cpp
    gm_commands/reload.cpp
    gm_commands/repop.cpp
    gm_commands/repopclose.cpp
    gm_commands/resetaa.cpp
    gm_commands/resetboat.cpp
    gm_commands/revoke.cpp
    gm_commands/rewind.cpp
    gm_commands/rules.cpp
    gm_commands/save.cpp
    gm_commands/scribespell.cpp
    gm_commands/scribespells.cpp
    gm_commands/sendop.cpp
    gm_commands/sendzonespawns.cpp
    gm_commands/serversidename.cpp
    gm_commands/set.cpp
    gm_commands/setgraveyard.cpp
    gm_commands/setgreed.cpp
    gm_commands/showbonusstats.cpp
    gm_commands/showfilters.cpp
    gm_commands/show.cpp
    gm_commands/showhelm.cpp
    gm_commands/showpetspell.cpp
    gm_commands/showregen.cpp
    gm_commands/showtraderitems.cpp
    gm_commands/shutdown.cpp
    gm_commands/size.cpp
    gm_commands/skilldifficulty.cpp
    gm_commands/spawn.cpp
    gm_commands/spawnfix.cpp
    gm_commands/spellinfo.cpp
    gm_commands/starve.cpp
    gm_commands/stun.cpp
    gm_commands/summon.cpp
    gm_commands/summonitem.cpp
    gm_commands/suspend.cpp
    gm_commands/synctod.cpp
    gm_commands/testcommand.cpp
    gm_commands/testspawn.cpp
    gm_commands/undeletechar.cpp
    gm_commands/underworld.cpp
    gm_commands/unmemspell.cpp
    gm_commands/unmemspells.cpp
    gm_commands/unscribespell.cpp
    gm_commands/unscribespells.cpp
    gm_commands/viewplayerfaction.cpp
    gm_commands/wc.cpp
    gm_commands/worldshutdown.cpp
    gm_commands/wp.cpp
    gm_commands/wpadd.cpp
    gm_commands/xpinfo.cpp
    gm_commands/zone.cpp
    gm_commands/zonebootup.cpp
    gm_commands/zoneshutdown.cpp
    gm_commands/zonespawn.cpp
    gm_commands/zopp.cpp
    gm_commands/zsave.cpp
    gm_commands/zuwcoords.cpp
)
add_library(gm_commands_zone STATIC ${gm_command_sources})
set_target_properties(gm_commands_zone PROPERTIES UNITY_BUILD ON UNITY_BUILD_BATCH_SIZE 32)

# zone combine sources and headers
ADD_EXECUTABLE(zone ${zone_sources} ${zone_headers})

# binary output directory
INSTALL(TARGETS zone RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)

# precompiled headers
IF (WIN32 AND EQEMU_BUILD_PCH)
    TARGET_PRECOMPILE_HEADERS(zone PRIVATE ../common/pch/app-pch.h)
    TARGET_PRECOMPILE_HEADERS(zone PRIVATE ../common/pch/std-pch.h)
    TARGET_PRECOMPILE_HEADERS(zone PRIVATE ./pch/pch.h)
ENDIF()

ADD_DEFINITIONS(-DZONE)

# link lua_zone unity build against luabind
target_link_libraries(lua_zone PRIVATE luabind)
if (EQEMU_BUILD_STATIC AND LUA_LIBRARY)
    target_link_libraries(zone PRIVATE ${LUA_LIBRARY})
endif()

# link zone against common libraries
target_link_libraries(zone PRIVATE lua_zone gm_commands_zone ${ZONE_LIBS})

SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)